
#include "./Task/Task.h"
#include "./StateTransition/TaskControl.h"

#ifndef WINDOWS_DEBUG
#include "hal_data.h"
#include "./nfc/intfs/nfc_ctrl.h"
#endif

#ifdef WINDOWS_DEBUG
using namespace System;
using namespace System::Timers;

#include <thread>

#endif

/////////////////////////////////////
//各タスククラスのポインタ変数を定義
/////////////////////////////////////
DebugCommand* G_pDebugCommand;
OutputController* G_pOutputController;
NfcReader* G_pNfcReader;
QrReader* G_pQrReader;
DataManager* G_pDataManager;
FwUpdater* G_pFwUpdater;
CommandReceiver* G_pCommandReceiver;
EventSender* G_pEventSender;

/////////////////////////////////////
//タスクコントローラクラスポインタ変数
/////////////////////////////////////
static TaskControl *_pTask;

#ifndef WINDOWS_DEBUG
//デバイスドライバークラス
WDT *G_pDrvWDT;			//WatchDog
PWM *G_pDrvPWM_LED_Left_G;      //PWM
PWM *G_pDrvPWM_LED_Center_G;    //PWM
PWM *G_pDrvPWM_LED_Right_G;     //PWM
PWM *G_pDrvPWM_LED_Frame_G;     //PWM
PWM *G_pDrvPWM_LED_Frame_R;     //PWM
PWM *G_pDrvPWM_LED_Frame_B;     //PWM
PWM *G_pDrvPWM_Buzzer;     //PWM
IOPort *G_pDrvIOPort;   //IOPort
AGT *G_pDrvAGT;     //AGT タイマー
UART *G_pDrvUART_BLE; //UART1 (将来的にLEポート)
UART *G_pDrvUART_Reserved; //UART2 (予備ポート)
UART *G_pDrvUART_QRReader; //UART3 (QR Readerポート)
UART *G_pDrvUART_RS485; //UART0 (RS485ポート)

ADC *G_pDrvADC_Vol; // ADC（ボリューム）

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
#endif  /*WINDOWS_DEBUG*/

TYPE_ERROR AddTask(TaskControl&);
TYPE_ERROR Init(void);

void NFCDoTask(void);


#ifndef WINDOWS_DEBUG
void CreateDeviceDriver(void);
FSP_CPP_FOOTER
#endif	/*WINDOWS_DEBUG*/

//NFC初期化指示フラグ
bool G_NFCInitStart = false;
//NFC強制停止指示フラグ
bool G_NFCForceStop = false;

void NFCDoTask(void);
void NFCResetPinWriteError(void);
// try-catch の代わりに FatalException発生時に直接コールする関数を定義（StateTransition/FatalException.h 参照）
extern "C" void Throw_FatalExceltionEvent(const char* pFilePath, uint32_t line, const char* pTaskName, const char* pMessage)
{
    // タイマーを強制停止
    _pTask->StopForceTimerCount();

    // エラーをデータFlashに保存し、リブート
    G_pDataManager->SetSystemErrorInfoAndReboot(pFilePath, line, pTaskName, pMessage);
}

/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used.  This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/
#ifdef WINDOWS_DEBUG
 //Visual Studio C++動作時用
 //Windowsタイマー
ref class WinTimer
{
public:
    // タイマーから呼び出される処理
    void ElapsedEventHanlder(Object^ sender, ElapsedEventArgs^ e)
    {
        //タイマクラステスト用
        _pTask->TimerCount();
    }
};
int main(array<System::String ^> ^args)
#else
void hal_entry(void)
#endif /*WINDOWS_DEBUG*/
{
    /* TODO: add your own code here */
	TYPE_ERROR err = E_OK;

    //タスクコントローラインスタンス作成
    _pTask = new TaskControl(TASK_NUMBER);

    //初期化
	err = Init();
	if (err != E_OK)
    {
        goto hal_entry_error;
    }

    //各タスクのインスタンス作成・登録
    err = AddTask(*_pTask);
    if (err != E_OK)
    {
        goto hal_entry_error;
    }

// ##### これまでこの行以降に実装していた try-catch は、RA環境のRAM消費抑制の為 2023/12/1 に削除、
// ##### 致命的エラー箇所で EXEPTION関連マクロを経由し Throw_FatalExceltionEvent() が呼ばれるようにした
    
    // 開始指示が必要なタスクに通知
    G_pOutputController->SendEvent(EVT_OUTPUT_START);
    G_pDataManager->SendEvent(EVT_DATA_START);
#ifndef WINDOWS_DEBUG
#ifndef DEBUG_NO_NFC

    //NFC初期化指示待ち(NFCReaderタスクが指示する)
    while(!G_NFCInitStart)
    {
        NFCDoTask();
    }
    InitNFC();
#endif
#endif
    // 状態の遷移に応じて、各タスクのハンドラを実行し続ける
    while (1)
    {
#ifdef WINDOWS_DEBUG
    // 効果が確認出来ない為、止める
    // std::this_thread::yield();  // Windows 他スレッドに処理を移す
        NFCDoTask();
#else
#ifdef DEBUG_NO_NFC
        NFCDoTask();
#else
        //NFC処理、各タスク実行
        //_pTask->DoTask()はDoNFC処理のSleep時に呼び出される関数
        DoNFC();
#endif
#endif
    }

hal_entry_error:

#ifdef WINDOWS_DEBUG
    std::cout << " #### HAL_ENTRY_ERROR ####\r\n";
#endif

    // 初期化時のシステムエラー
    // ROMにシステムエラー情報を書き込んでリブート（ここでブロックする）
    THROW_FATAL_ERROR("hal_entry", "Initialize Error");

#ifndef WINDOWS_DEBUG
#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
#endif	/*WINDOWS_DEBUG*/
}



#ifndef WINDOWS_DEBUG
/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

        /* Enable reading from data flash. */
        R_FACI_LP->DFLCTL = 1U;

        /* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
         * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        //R_IOPORT_Open (&g_ioport_ctrl, &IOPORT_CFG_NAME);
    }
}


#if BSP_TZ_SECURE_BUILD

FSP_CPP_HEADER
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build (Remove this if it is not required to build). */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
FSP_CPP_FOOTER
#endif
#endif	/*WINDOWS_DEBUG*/
/*!------------------------------------------------
@brief 初期化
-------------------------------------------------*/
TYPE_ERROR Init(void)
{
    TYPE_ERROR err = E_OK;

#ifdef WINDOWS_DEBUG
    WinTimer^ winTimer = gcnew WinTimer();
    // タイマーを生成
    System::Timers::Timer^ timer = gcnew System::Timers::Timer();
    // タイマーから呼び出される処理の間隔を設定(ミリ秒)
    timer->Interval = 10;
    // タイマーから呼び出される処理ハンドラを設定
    timer->Elapsed += gcnew ElapsedEventHandler(winTimer, &WinTimer::ElapsedEventHanlder);
    // タイマーを開始
    timer->Start();
	//デバッグ用
    WinSerialPort::Open(COM_PORT1_BLE);
    //上位システム用
    WinSerialPort::Open(COM_PORT0_RS485);
    //QRリーダー用
    WinSerialPort::Open(COM_PORT3_QR);
#else

    //デバイスドライバクラス　インスタンス作成
    CreateDeviceDriver();

	//WDT
    err = G_pDrvWDT->Init();
    if(E_OK != err){goto Init_Error;}
	
	//PWM
    err = G_pDrvPWM_LED_Left_G->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvPWM_LED_Center_G->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvPWM_LED_Right_G->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvPWM_LED_Frame_G->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvPWM_LED_Frame_R->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvPWM_LED_Frame_B->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvPWM_Buzzer->Init();
    if(E_OK != err){goto Init_Error;}
	
    //IOPort
    err = G_pDrvIOPort->Init();
    if(E_OK != err){goto Init_Error;}

    //AGT
    err = G_pDrvAGT->Init();
    if(E_OK != err){goto Init_Error;}
    err = G_pDrvAGT->Start();
    if(E_OK != err){goto Init_Error;}

    //UART　BLE
    err = G_pDrvUART_BLE->Init();
    if(E_OK != err){goto Init_Error;}

    //UART　Reserved
    //err = G_pDrvUART_Reserved->Init();
    //if(E_OK != err){goto Init_Error;}

    //UART　QRReader
    err = G_pDrvUART_QRReader->Init();
    if(E_OK != err){goto Init_Error;}

    //UART RS485
    err = G_pDrvUART_RS485->Init();
    if(E_OK != err){goto Init_Error;}

    //ADC ボリューム
    err = G_pDrvADC_Vol->Init();

Init_Error:
#endif
    return err;
}
/*!------------------------------------------------
@brief タスクの登録、インスタンス作成
-------------------------------------------------*/
TYPE_ERROR AddTask(TaskControl& Task)
{
    TYPE_ERROR err = E_OK;

    //デバッグコマンドタスク
    G_pDebugCommand = new DebugCommand();
    err = Task.AddTask(G_pDebugCommand);
    if (err != E_OK){ return err; }

    //データ管理タスク
    G_pDataManager = new DataManager();
    err = Task.AddTask(G_pDataManager);
    if (err != E_OK) { return err; }

    //NFCリーダ受信タスク
    G_pNfcReader = new NfcReader();
    err = Task.AddTask(G_pNfcReader);
    if (err != E_OK){ return err; }

    //QRリーダ受信タスク
    G_pQrReader = new QrReader();
    err = Task.AddTask(G_pQrReader);
    if (err != E_OK){ return err; }

    //出力ポート制御タスク
    G_pOutputController = new OutputController();
    err = Task.AddTask(G_pOutputController);
    if (err != E_OK) { return err; }

    //ファームウエア更新タスク
    G_pFwUpdater = new FwUpdater();
    err = Task.AddTask(G_pFwUpdater);
    if (err != E_OK){ return err; }

    //コマンド受信タスク
    G_pCommandReceiver = new CommandReceiver();
    err = Task.AddTask(G_pCommandReceiver);
    if (err != E_OK){ return err; }

    //イベント・応答・送信タスク
    G_pEventSender = new EventSender();
    err = Task.AddTask(G_pEventSender);
    if (err != E_OK){ return err; }

    return err;
}

#ifndef WINDOWS_DEBUG
/*!------------------------------------------------
@brief デバイスドライバクラスインスタンス作成
-------------------------------------------------*/
void CreateDeviceDriver(void)
{
	G_pDrvWDT = new WDT();
	
	G_pDrvPWM_LED_Left_G = new PWM(&g_timer5_ctrl, &g_timer5_cfg);
	G_pDrvPWM_LED_Center_G = new PWM(&g_timer2_ctrl, &g_timer2_cfg);
	G_pDrvPWM_LED_Right_G = new PWM(&g_timer1_ctrl, &g_timer1_cfg);
	G_pDrvPWM_LED_Frame_G = new PWM(&g_timer8_ctrl, &g_timer8_cfg);
	G_pDrvPWM_LED_Frame_R = new PWM(&g_timer6_ctrl, &g_timer6_cfg);
	G_pDrvPWM_LED_Frame_B = new PWM(&g_timer7_ctrl, &g_timer7_cfg);
	G_pDrvPWM_Buzzer = new PWM(&g_timer4_ctrl, &g_timer4_cfg);

    G_pDrvIOPort = new IOPort(&g_ioport_ctrl);

    G_pDrvAGT = new AGT();

    G_pDrvUART_BLE = new UART(&g_uart1_ctrl,(uart_cfg_t*)&g_uart1_cfg,256,1024); // DebugCommand 送信用に充分なバッファを確保
    //G_pDrvUART_Reserved= new UART(&g_uart2_ctrl,(uart_cfg_t*)&g_uart2_cfg,256,256);
    G_pDrvUART_QRReader = new UART(&g_uart3_ctrl,(uart_cfg_t*)&g_uart3_cfg,256,64); //送信バッファは初期化コマンド分のみで良い
    G_pDrvUART_RS485 = new UART(&g_uart0_ctrl,(uart_cfg_t*)&g_uart0_cfg,512,256);
}
/*!------------------------------------------------
@brief AGT　タイマー割り込み(10msec周期)
-------------------------------------------------*/
void timer0_Interrupt_callback(timer_callback_args_t *p_args)
{
    if(TIMER_EVENT_CYCLE_END == p_args->event)
    {
        _pTask->TimerCount();
    }
}
/*!------------------------------------------------
@brief NFC用デバッグ出力
-------------------------------------------------*/
void NFCDebugPrint(char* format, ...)
{
    va_list argptr;
    G_pDebugCommand->SendPrintSciEx(format, argptr);
}
#endif	/*WINDOWS_DEBUG*/

/*!------------------------------------------------
@brief タスク実行ハンドラ
phOsal_Port_R7FA2L1AB2DFP.cファイルのvoid phOsal_Sleep(void)関数より呼び出される
強制停止フラグONの場合はNFC処理に処理を渡さない
-------------------------------------------------*/
void NFCDoTask(void)
{
    do{
        //タスク実行
        _pTask->DoTask();
#ifndef WINDOWS_DEBUG
        G_pDrvWDT->Refresh();
#endif
    //強制停止フラグがONの場合はNFC処理に渡さない
    }while(G_NFCForceStop);
}

#ifndef WINDOWS_DEBUG
/*!------------------------------------------------
@brief カード検出通知
LED Dutyを変更するため
nfc_ctrl.cファイルのReadNFC関数よりカード検出時に呼び出される
-------------------------------------------------*/
void NFCDetectedCard(bool IsDetect)
{
    G_pOutputController->DetectedCard(IsDetect);
}

/*!------------------------------------------------
@brief NFCカードデータ読取り通知
nfc_ctrl.cファイルのNFCForumProcess関数よりカードデータ読込時に呼び出される
-------------------------------------------------*/
#define NFC_DATA_MAX 0x07
static TYPE_NFC_DATA SendNfcData[NFC_DATA_MAX];
static uint8_t NFCDataIndex = 0;
void NFCNoticeCardData(TYPE_NFC_DATA *pNfcData)
{
    G_pDebugCommand->SetDebugTime(1);

    memcpy(&SendNfcData[NFCDataIndex], pNfcData, sizeof(TYPE_NFC_DATA));
    //複数カード検出対策のため、短い周期で検出通知の可能性あり、リングバッファを設けて送信する
    G_pNfcReader->SendEvent(EVT_NFC_DETECT_CARD, (uint8_t *)&SendNfcData[NFCDataIndex], sizeof(TYPE_NFC_DATA));
    NFCDataIndex++;
    if(NFCDataIndex >= NFC_DATA_MAX)
    {
        NFCDataIndex = 0;
    }
}

/*!------------------------------------------------
@brief NFCエラー検出通知
nfc_ctrl.cファイルのNFCForumProcess関数よりカードデータ読込時に呼び出される
-------------------------------------------------*/
//DataManager通知エラー変換テーブル
static EVENT_COUNT NfcError[NFC_ERROR_RW_MAX] ={
    (EVENT_COUNT)0                     // エラーなし
   , EVENT_ERROR_RW_INIT                // 32:R/W通信エラー回数(初期設定中)
   , EVENT_ERROR_RW_POL                // 33:R/W通信エラー回数(ポーリング中:カード捕捉)
   , EVENT_ERROR_RW_SELECT             // 34:R/W通信エラー回数(カードセレクト中)
   , EVENT_ERROR_RW_POL2               // 35:R/W通信エラー回数(ポーリング中:共通領域)
   , EVENT_ERROR_RW_DATA               // 36:R/W通信エラー回数(ブロック２リード中)
   , EVENT_ERROR_RW_DATA4              // 37:R/W通信エラー回数(ブロック４リード中)未使用
   , EVENT_ERROR_RW_RELEASE            // 38:R/W通信エラー回数(カードリリース)
   , EVENT_ERROR_RW_POL3               // 39:R/W通信エラー回数(ポーリング中:カードリリース)
   , EVENT_ERROR_RW_M_POL              // 40:R/W通信エラー回数(MIFARE ポーリング中:カード捕捉)未使用
   , EVENT_ERROR_RW_M_AUTH1            // 41:R/W通信エラー回数(MIFARE 1ブロック目認証)
   , EVENT_ERROR_RW_M_AUTH2            // 42:R/W通信エラー回数(MIFARE 2ブロック目認証)
   , EVENT_ERROR_RW_M_READ1            // 43:R/W通信エラー回数(MIFARE 1ブロック目リード)
   , EVENT_ERROR_RW_M_READ2            // 44:R/W通信エラー回数(MIFARE 2ブロック目リード)
};

void NFCDetectError(ENUM_NFC_ERROR err)
{
    //エラー検出時はエラーをDataManagerに通知
    if(NFC_ERROR_RW_OK != err && NFC_ERROR_RW_MAX > err)
    {
        G_pDataManager->AddEventCount(NfcError[err]);
    }
    if(NFC_ERROR_RW_INIT == err)
    {
        //初期化エラー記録
        G_pDataManager->SetErrorFlag(ERRORFLAG_RW_OFFSET, ERRORFLAG_RW_INIT);
    }
}
/*!------------------------------------------------
@brief NFC初期化完了通知
nfc_ctrl.cファイルのDiscoveryLoop関数より初期化完了時に呼び出される
-------------------------------------------------*/
void NFCInitComlpete(void)
{
    G_pNfcReader->SendEvent(EVT_NFC_DRVINIT_COMPLETE);
}
/*!------------------------------------------------
@brief NFCリセットピン出力エラー
phDriver_R7FA2L1AB2DFPOpen.cファイルのphDriver_PinWrite関数より呼び出される
-------------------------------------------------*/
void NFCResetPinWriteError(void)
{
    //エラー記録
    G_pDataManager->SetErrorFlag(ERRORFLAG_PORT_RW_OFFSET, ERRORFLAG_PORT_RW_RESET);
}
#endif	/*WINDOWS_DEBUG*/
